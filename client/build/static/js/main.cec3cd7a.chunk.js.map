{"version":3,"sources":["components/Welcome/index.js","utils/mutations.js","utils/auth.js","components/Login/index.js","pages/Home.js","pages/Login.js","pages/Signup.js","assets/golflogo.png","components/Nav/index.js","utils/queries.js","pages/FindPlayers.js","App.js","serviceWorker.js","index.js"],"names":["Welcome","class","Card","Body","Title","Text","Button","variant","LOGIN","gql","ADD_USER","decode","this","getToken","token","isTokenExpired","exp","Date","now","err","localStorage","getItem","idToken","setItem","window","location","assign","removeItem","Login","Home","className","id","props","useState","email","password","formState","setFormState","useMutation","login","error","handleFormSubmit","event","preventDefault","variables","mutationResponse","data","Auth","console","log","handleChange","target","name","value","to","Form","onSubmit","Group","controlId","Label","Control","type","placeholder","onChange","Signup","addUser","firstName","lastName","NavBar","loggedIn","Navbar","bg","Container","Brand","src","logo","alt","Nav","Link","href","onClick","logout","QUERY_USER","FindPlayers","user","useQuery","orders","map","order","parseInt","purchaseDate","toLocaleDateString","products","index","_id","image","price","httpLink","createHttpLink","uri","authLink","setContext","_","headers","authorization","client","ApolloClient","link","concat","cache","InMemoryCache","App","ApolloProvider","path","element","isLocalhost","Boolean","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","onUpdate","onSuccess","catch","ReactDOM","render","StrictMode","document","getElementById","URL","process","origin","addEventListener","fetch","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.cec3cd7a.chunk.js","sourcesContent":["import React from \"react\";\nimport Card from 'react-bootstrap/Card';\nimport Button from 'react-bootstrap/Button'\nimport './welcome.css';\n\nfunction Welcome() {\n  return (\n    <div class='card-holder' >\n      <Card>\n        <Card.Body>\n          <Card.Title>Ready to meet some people!</Card.Title>\n          <Card.Text>\n            Make sure you sign up!\n          </Card.Text>\n          <Button variant=\"primary\">Go somewhere</Button>\n        </Card.Body>\n      </Card>\n    </div>\n  );\n}\n\nexport default Welcome;","import { gql } from '@apollo/client';\n\nexport const LOGIN = gql`\n  mutation login($email: String!, $password: String!) {\n    login(email: $email, password: $password) {\n      token\n      user {\n        _id\n      }\n    }\n  }\n`;\n\n\n\nexport const ADD_USER = gql`\n  mutation addUser(\n    $firstName: String!\n    $lastName: String!\n    $email: String!\n    $password: String!\n  ) {\n    addUser(\n      firstName: $firstName\n      lastName: $lastName\n      email: $email\n      password: $password\n    ) {\n      token\n      user {\n        _id\n      }\n    }\n  }\n`;\n","import decode from 'jwt-decode';\n\nclass AuthService {\n  getProfile() {\n    return decode(this.getToken());\n  }\n\n  loggedIn() {\n    // Checks if there is a saved token and it's still valid\n    const token = this.getToken();\n    return !!token && !this.isTokenExpired(token);\n  }\n\n  isTokenExpired(token) {\n    try {\n      const decoded = decode(token);\n      if (decoded.exp < Date.now() / 1000) {\n        return true;\n      } else return false;\n    } catch (err) {\n      return false;\n    }\n  }\n\n  getToken() {\n    // Retrieves the user token from localStorage\n    return localStorage.getItem('id_token');\n  }\n\n  login(idToken) {\n    // Saves user token to localStorage\n    localStorage.setItem('id_token', idToken);\n\n    window.location.assign('/');\n  }\n\n  logout() {\n    // Clear user token and profile data from localStorage\n    localStorage.removeItem('id_token');\n    // this will reload the page and reset the state of the application\n    window.location.assign('/');\n  }\n}\n\nexport default new AuthService();\n","import React, { useState } from 'react';\nimport { useMutation } from '@apollo/client';\nimport { Link } from 'react-router-dom';\nimport { LOGIN } from '../../utils/mutations';\nimport Auth from '../../utils/auth';\nimport Form from 'react-bootstrap/Form';\nimport Button from 'react-bootstrap/Button';\n\n\nfunction Login(props) {\n  const [formState, setFormState] = useState({ email: '', password: '' });\n  const [login, { error }] = useMutation(LOGIN);\n\n  const handleFormSubmit = async (event) => {\n    event.preventDefault();\n    try {\n      const mutationResponse = await login({\n        variables: { email: formState.email, password: formState.password },\n      });\n      const token = mutationResponse.data.login.token;\n      Auth.login(token);\n    } catch (e) {\n      console.log(e);\n    }\n  };\n\n  const handleChange = (event) => {\n    const { name, value } = event.target;\n    setFormState({\n      ...formState,\n      [name]: value,\n    });\n  };\n  \n  return (\n\n//     <Form onSubmit={handleFormSubmit}>\n//   <Form.Group className=\"mb-3\" controlId=\"formBasicEmail\">\n//     <Form.Label>Email address</Form.Label>\n//     <Form.Control type=\"email\" placeholder=\"Enter email\" id=\"email\" onChange={handleChange}/>\n//     <Form.Text className=\"text-muted\" >\n//       We'll never share your email with anyone else.\n//     </Form.Text>\n//   </Form.Group>\n\n//   <Form.Group className=\"mb-3\" controlId=\"formBasicPassword\">\n//     <Form.Label>Password</Form.Label>\n//     <Form.Control type=\"password\" placeholder=\"Password\" id=\"pwd\" onChange={handleChange}/>\n//   </Form.Group>\n//   <Form.Group className=\"mb-3\" controlId=\"formBasicCheckbox\">\n//     <Form.Check type=\"checkbox\" label=\"Check me out\" />\n//   </Form.Group>\n//   <Button variant=\"primary\" type=\"submit\">\n//     Submit\n//   </Button>\n// </Form>\n\n\n    <div className=\"container my-1\">\n      <Link to=\"/signup\">← Go to Signup</Link>\n\n      <h2>Login</h2>\n      <form onSubmit={handleFormSubmit}>\n        <div className=\"flex-row space-between my-2\">\n          <label htmlFor=\"email\">Email address:</label>\n          <input\n            placeholder=\"youremail@test.com\"\n            name=\"email\"\n            type=\"email\"\n            id=\"email\"\n            onChange={handleChange}\n          />\n        </div>\n        <div className=\"flex-row space-between my-2\">\n          <label htmlFor=\"pwd\">Password:</label>\n          <input\n            placeholder=\"******\"\n            name=\"password\"\n            type=\"password\"\n            id=\"pwd\"\n            onChange={handleChange}\n          />\n        </div>\n        {error ? (\n          <div>\n            <p className=\"error-text\">The provided credentials are incorrect</p>\n          </div>\n        ) : null}\n        <div className=\"flex-row flex-end\">\n          <button type=\"submit\">Submit</button>\n        </div>\n      </form>\n    </div>\n  );\n}\n\nexport default Login;\n","import React from \"react\";\nimport './home.css';\nimport Welcome from '../components/Welcome';\nimport Login from \"../components/Login\";\n\n\n\nconst Home = () => {\n  return (\n    <div className=\"container\" id=\"Home\" >\n     <Welcome />\n    </div>\n  );\n};\n\nexport default Home;\n","import React, { useState } from \"react\";\n\nimport \"./login.css\";\nimport Form from \"react-bootstrap/Form\";\nimport Button from \"react-bootstrap/Button\";\nimport { useMutation } from \"@apollo/client\";\nimport { Link } from \"react-router-dom\";\nimport { LOGIN } from \"../utils/mutations\";\nimport Auth from \"../utils/auth\";\n\nfunction Login(props) {\n  const [formState, setFormState] = useState({ email: \"\", password: \"\" });\n  const [login, { error }] = useMutation(LOGIN);\n\n  const handleFormSubmit = async (event) => {\n    event.preventDefault();\n    try {\n      const mutationResponse = await login({\n        variables: { email: formState.email, password: formState.password },\n      });\n      const token = mutationResponse.data.login.token;\n      Auth.login(token);\n    } catch (e) {\n      console.log(e);\n    }\n  };\n\n  const handleChange = (event) => {\n    const { name, value } = event.target;\n    setFormState({\n      ...formState,\n      [name]: value,\n    });\n  };\n\n  return (\n    <div className=\"container login-card\">\n      <Link to=\"/signup\">← Go to Signup</Link>\n      <h2>Login</h2>\n      <Form onSubmit={handleFormSubmit}>\n        <Form.Group className=\"mb-3\" controlId=\"formBasicEmail\">\n          <Form.Label>Email address</Form.Label>\n          <Form.Control\n            type=\"email\"\n            placeholder=\"Enter email\"\n            id=\"email\"\n            onChange={handleChange}\n          />\n          <Form.Text className=\"text-muted\">\n            We'll never share your email with anyone else.\n          </Form.Text>\n        </Form.Group>\n\n        <Form.Group className=\"mb-3\" controlId=\"formBasicPassword\">\n          <Form.Label>Password</Form.Label>\n          <Form.Control\n            type=\"password\"\n            placeholder=\"Password\"\n            id=\"pwd\"\n            onChange={handleChange}\n          />\n        </Form.Group>\n        {error ? (\n          <div>\n            <p className=\"error-text\">The provided credentials are incorrect</p>\n          </div>\n        ) : null}\n        <Button variant=\"primary\" type=\"submit\">\n          Submit\n        </Button>\n      </Form>\n    </div>\n  );\n}\n\nexport default Login;\n","import React, { useState } from \"react\";\n\nimport './signup.css';\nimport Form from \"react-bootstrap/Form\";\nimport Button from \"react-bootstrap/Button\";\n\nimport { Link } from \"react-router-dom\";\nimport { useMutation } from \"@apollo/client\";\nimport Auth from \"../utils/auth\";\nimport { ADD_USER } from \"../utils/mutations\";\n\nfunction Signup(props) {\n  const [formState, setFormState] = useState({ email: \"\", password: \"\" });\n  const [addUser] = useMutation(ADD_USER);\n\n  const handleFormSubmit = async (event) => {\n    event.preventDefault();\n    const mutationResponse = await addUser({\n      variables: {\n        email: formState.email,\n        password: formState.password,\n        firstName: formState.firstName,\n        lastName: formState.lastName,\n      },\n    });\n    const token = mutationResponse.data.addUser.token;\n    Auth.login(token);\n  };\n\n  const handleChange = (event) => {\n    const { name, value } = event.target;\n    setFormState({\n      ...formState,\n      [name]: value,\n    });\n  };\n\n  return (\n    <div className=\"container signup-card\">\n      <Link to=\"/login\">← Go to Login</Link>\n\n      <h2>Signup</h2>\n      <Form onSubmit={handleFormSubmit}>\n        <Form.Group className=\"mb-3\" controlId=\"formBasicFirstName\">\n          <Form.Label>First Name</Form.Label>\n          <Form.Control\n            type=\"firstname\"\n            placeholder=\"Enter first name\"\n            id=\"firstName\"\n            onChange={handleChange}\n          />\n        </Form.Group>\n\n        <Form.Group className=\"mb-3\" controlId=\"formBasicLastName\">\n          <Form.Label>Last Name</Form.Label>\n          <Form.Control\n            type=\"lastname\"\n            placeholder=\"Enter last name\"\n            id=\"lastName\"\n            onChange={handleChange}\n          />\n        </Form.Group>\n\n        <Form.Group className=\"mb-3\" controlId=\"formBasicEmail\">\n          <Form.Label>Email address</Form.Label>\n          <Form.Control type=\"email\" placeholder=\"Enter email\" id=\"email\" onChange={handleChange}/>\n          <Form.Text className=\"text-muted\">\n            We'll never share your email with anyone else.\n          </Form.Text>\n        </Form.Group>\n\n        <Form.Group className=\"mb-3\" controlId=\"formBasicPassword\">\n          <Form.Label>Password</Form.Label>\n          <Form.Control type=\"password\" placeholder=\"Password\" id=\"pwd\" onChange={handleChange}/>\n        </Form.Group>\n\n        <Button variant=\"primary\" type=\"submit\">←<Link to=\"/findplayers\">Submit</Link>\n        </Button>\n      </Form>\n    </div>\n  );\n}\n\nexport default Signup;\n","export default __webpack_public_path__ + \"static/media/golflogo.b4ed4905.png\";","import React from \"react\";\nimport Auth from \"../../utils/auth\";\nimport Navbar from \"react-bootstrap/Navbar\";\nimport Container from \"react-bootstrap/Container\";\nimport Nav from \"react-bootstrap/Nav\";\nimport { Link } from \"react-router-dom\";\nimport logo from '../../assets/golflogo.png'\n\n\nfunction NavBar() {\n\n  function showNavigation() {\n    if (Auth.loggedIn()) {\n      return (\n\n        <div>\n        <Navbar bg=\"dark\" variant=\"dark\">\n          <Container>\n            <Navbar.Brand> \n              <img src={logo} className=\"App-logo\" alt=\"logo\"/> \n              </Navbar.Brand>\n            <Nav className=\"me-auto\">\n              <Nav.Link><Link to=\"/Favorites\">\n                Favorites </Link></Nav.Link>\n              <Nav.Link>\n              <a href=\"/\" onClick={() => Auth.logout()}> Logout </a>\n              </Nav.Link>\n            </Nav>\n          </Container>\n        </Navbar>\n      </div>\n      );\n    } else {\n      return (\n        <div>\n        <Navbar bg=\"dark\" variant=\"dark\">\n          <Container>\n            <Navbar.Brand><Link to=\"/\"></Link></Navbar.Brand>\n            <Nav className=\"me-auto\">\n              <Nav.Link><Link to=\"/signup\"> Signup </Link></Nav.Link>\n              <Nav.Link>\n              <Link to=\"/login\"> Login</Link>\n              </Nav.Link>\n            </Nav>\n          </Container>\n        </Navbar>\n      </div>\n      );\n    }\n  }\n\n  return (\n    <div>\n      <nav>\n        {showNavigation()}\n      </nav>\n    </div>\n  );\n}\n\nexport default NavBar;\n","import { gql } from '@apollo/client';\n\n\n\nexport const QUERY_USER = gql`\n  {\n    user {\n      firstName\n      lastName\n      orders {\n        _id\n        purchaseDate\n        products {\n          _id\n          name\n          description\n          price\n          quantity\n          image\n        }\n      }\n    }\n  }\n`;\n","import { React, useState } from 'react';\nimport { Link } from 'react-router-dom';\nimport { useMutation } from '@apollo/client';\nimport Auth from '../utils/auth';\nimport { useQuery } from '@apollo/client';\nimport { QUERY_USER } from '../utils/queries';\nimport UserCards from '../components/UserCards';\n\nconst FindPlayers = () => {\n    // useMutation(getUsers)  use this to getUser information\n\n    //map over the data\n\n    //return back a card for every user that matches the criteria\n\n    //bring in user card component\n    //data in each part of the user card\n    //data.map pass over the user card\n    //<UserCard name={user.name} level={user.level}/>\n\n    const { data } = useQuery(QUERY_USER);\n    let user;\n\n    if (data) {\n        user = data.user;\n    }\n\n    return (\n        <>\n            <div className=\"container my-1\">\n                <Link to=\"/\">← </Link>\n\n                {user ? (\n                    <>\n                        <h2>\n                            Order History for {user.firstName} {user.lastName}\n                        </h2>\n                        {user.orders.map((order) => (\n                            <div key={order._id} className=\"my-2\">\n                                <h3>\n                                    {new Date(parseInt(order.purchaseDate)).toLocaleDateString()}\n                                </h3>\n                                <div className=\"flex-row\">\n                                    {order.products.map(({ _id, image, name, price }, index) => (\n                                        <div key={index} className=\"card px-1 py-1\">\n                                            <Link to={`/products/${_id}`}>\n                                                <img alt={name} src={`/images/${image}`} />\n                                                <p>{name}</p>\n                                            </Link>\n                                            <div>\n                                                <span>${price}</span>\n                                            </div>\n                                        </div>\n                                    ))}\n                                </div>\n                            </div>\n                        ))}\n                    </>\n                ) : null}\n            </div>\n        </>\n    );\n};\n\n\nexport default FindPlayers;","import React from \"react\";\nimport { BrowserRouter as Router, Routes, Route } from \"react-router-dom\";\nimport {\n  ApolloClient,\n  InMemoryCache,\n  ApolloProvider,\n  createHttpLink,\n} from \"@apollo/client\";\nimport { setContext } from \"@apollo/client/link/context\";\n\nimport Home from \"./pages/Home\";\nimport NoMatch from \"./pages/NoMatch\";\nimport Login from \"./pages/Login\";\nimport Signup from \"./pages/Signup\";\nimport Nav from \"./components/Nav\";\nimport UserCards from \"./components/UserCards\";\nimport FindPlayers from \"./pages/FindPlayers\";\n\nconst httpLink = createHttpLink({\n  uri: \"/graphql\",\n});\n\nconst authLink = setContext((_, { headers }) => {\n  const token = localStorage.getItem(\"id_token\");\n  return {\n    headers: {\n      ...headers,\n      authorization: token ? `Bearer ${token}` : \"\",\n    },\n  };\n});\n\nconst client = new ApolloClient({\n  link: authLink.concat(httpLink),\n  cache: new InMemoryCache(),\n});\n\nfunction App() {\n  return (\n    <ApolloProvider client={client}>\n      <Router>\n        <div className=\"App\">\n          <Nav />\n          <Routes>\n            <Route path=\"/\" element={<Home />} />\n            <Route path=\"/login\" element={<Login />} />\n            <Route path=\"/signup\" element={<Signup />} />\n            <Route path=\"/signup\" element={<FindPlayers />} />\n          </Routes>\n          {/* <div>\n            <UserCards />\n          </div> */}\n        </div>\n      </Router>\n    </ApolloProvider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n  // [::1] is the IPv6 localhost address.\n  window.location.hostname === '[::1]' ||\n  // 127.0.0.0/8 are considered localhost for IPv4.\n  window.location.hostname.match(\n    /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n  )\n);\n\nexport function register(config) {\n  if (\n    process.env.NODE_ENV === 'production' &&\n    'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n            'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}